name: Azure Pipelines

# trigger:
# - main

pool: myAgentPool

variables:
  - group: azsecret
  
stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadSecureFile@1
      displayName: Download azsecret.conf file
      name: azsecret
      inputs:
        secureFile: 'azsecret.conf'
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: 'Install an SSH key'    
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAADAQABAAABAQDLOixPLai8/gdbObslt3p1+IMhuJ3qTQSehdNvhC9moaGg3n+SO7Z3hsAcFudCProqUu5+jbqLoPs4iVIXxMijFH/3F0rGz06Zkx0B59qkKHqtF8jVlyzak8ZLBJxLGoeJjkPJDS6QG9eMbPMMV4vmw9s3meeQatUsHwvhErlGRyQ/dy4oyfiaOToK3GWZYa6twhD+RxucBMsNBtBavGNMwXdcjxR+HNhfa5W7AU/TgDbLevYcT52z+fMSs6oeuDx+DwSMbw3VIbMT/f6JbfjATu3sD87oIlDbLLoiNz9C8I/JSF4KhmrUdLdrgBkxjAl8GJYeSbDO4OtUKNPoXGfl'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'id_rsa_azure_portal'
    
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-backend-config=$(azsecret.secureFilePath)'
        backendType: 'azurerm'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate17745'
        backendAzureRmContainerName: 'tfstate'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: true
  
    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: myServiceConnection
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)
    
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:        
          command: 'plan'
          environmentServiceName: 'myServiceConnection'
          allowTelemetryCollection: true
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-lock=false'

    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        environmentServiceName: 'myServiceConnection'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        allowTelemetryCollection: true
        commandOptions: '-lock=false'

- stage: Build
  jobs:
  - job: build_artifacts  
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-latest'
    steps: 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Fakerestapi as Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'
    
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'myServiceConnection'
                  appType: 'webApp'
                  WebAppName: 'p3application-p3Appservice'
                  packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
                  DeploymentType: zipDeploy             

  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    pool:
      vmImage: 'ubuntu-latest'
    environment:
      name: 'myEnvironment'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - bash: |
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                python3 -m pip install --upgrade pip
                pip3 install selenium
                # Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
              env: 
                AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
                AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
              displayName: Configure VM
- stage: Test
  jobs:
  - job: IntegrationTests
    displayName: Integration Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo npm install -g newman
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      
    - task: CmdLine@2
      displayName: Apply Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run automatedtesting/postman/regressiontest.postman_collection.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
   
    - task: CmdLine@2
      displayName: Apply Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run automatedtesting/postman/datavalidation.postman_collection.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-validation.xml'
        workingDirectory: '$(System.DefaultWorkingdirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/' 
        publishRunAttachments: true 